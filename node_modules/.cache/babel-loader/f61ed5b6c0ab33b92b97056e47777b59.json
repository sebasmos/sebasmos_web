{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useRef } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport classNames from 'classnames';\nimport BaseOverlay from 'react-overlays/Overlay';\nimport Fade from './Fade';\nvar defaultProps = {\n  transition: Fade,\n  rootClose: false,\n  show: false,\n  placement: 'top'\n};\n\nfunction wrapRefs(props, arrowProps) {\n  var ref = props.ref;\n  var aRef = arrowProps.ref;\n\n  props.ref = ref.__wrapped || (ref.__wrapped = function (r) {\n    return ref(findDOMNode(r));\n  });\n\n  arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = function (r) {\n    return aRef(findDOMNode(r));\n  });\n}\n\nfunction Overlay(_ref) {\n  var overlay = _ref.children,\n      transition = _ref.transition,\n      outerProps = _objectWithoutPropertiesLoose(_ref, [\"children\", \"transition\"]);\n\n  var popperRef = useRef({});\n  transition = transition === true ? Fade : transition || null;\n  return React.createElement(BaseOverlay, _extends({}, outerProps, {\n    transition: transition\n  }), function (_ref2) {\n    var overlayProps = _ref2.props,\n        arrowProps = _ref2.arrowProps,\n        show = _ref2.show,\n        state = _ref2.state,\n        scheduleUpdate = _ref2.scheduleUpdate,\n        placement = _ref2.placement,\n        outOfBoundaries = _ref2.outOfBoundaries,\n        props = _objectWithoutPropertiesLoose(_ref2, [\"props\", \"arrowProps\", \"show\", \"state\", \"scheduleUpdate\", \"placement\", \"outOfBoundaries\"]);\n\n    wrapRefs(overlayProps, arrowProps);\n    var popper = Object.assign(popperRef.current, {\n      state: state,\n      scheduleUpdate: scheduleUpdate,\n      placement: placement,\n      outOfBoundaries: outOfBoundaries\n    });\n    if (typeof overlay === 'function') return overlay(_extends({}, props, {}, overlayProps, {\n      placement: placement,\n      show: show,\n      popper: popper,\n      arrowProps: arrowProps\n    }));\n    return React.cloneElement(overlay, _extends({}, props, {}, overlayProps, {\n      placement: placement,\n      arrowProps: arrowProps,\n      popper: popper,\n      className: classNames(overlay.props.className, !transition && show && 'show'),\n      style: _extends({}, overlay.props.style, {}, overlayProps.style)\n    }));\n  });\n}\n\nOverlay.defaultProps = defaultProps;\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}