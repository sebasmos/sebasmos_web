{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n\nimport * as React from 'react';\nimport { getOverrides } from '../helpers/overrides.js';\nimport { Root as StyledRoot } from './styled-components.js';\nimport { STATE_CHANGE_TYPE } from './constants.js';\n\nvar Accordion = /*#__PURE__*/function (_React$Component) {\n  _inherits(Accordion, _React$Component);\n\n  function Accordion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Accordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Accordion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", _objectSpread({\n      expanded: []\n    }, _this.props.initialState));\n\n    return _this;\n  }\n\n  _createClass(Accordion, [{\n    key: \"onPanelChange\",\n    value: function onPanelChange(key, onChange) {\n      var activeKeys = this.state.expanded;\n      var accordion = this.props.accordion;\n\n      if (accordion) {\n        activeKeys = activeKeys[0] === key ? [] : [key];\n      } else {\n        activeKeys = _toConsumableArray(activeKeys);\n        var index = activeKeys.indexOf(key);\n        var wasExpanded = index > -1;\n\n        if (wasExpanded) {\n          // remove active state\n          activeKeys.splice(index, 1);\n        } else {\n          activeKeys.push(key);\n        }\n      }\n\n      var newState = {\n        expanded: activeKeys\n      };\n      this.internalSetState(STATE_CHANGE_TYPE.expand, newState);\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      if (typeof onChange === 'function') onChange.apply(void 0, args);\n    }\n  }, {\n    key: \"internalSetState\",\n    value: function internalSetState(type, changes) {\n      var _this$props = this.props,\n          stateReducer = _this$props.stateReducer,\n          onChange = _this$props.onChange;\n      var newState = stateReducer(type, changes, this.state);\n      this.setState(newState);\n      typeof onChange === 'function' && onChange(newState);\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      var _this2 = this;\n\n      var expanded = this.state.expanded;\n      var _this$props2 = this.props,\n          accordion = _this$props2.accordion,\n          disabled = _this$props2.disabled,\n          children = _this$props2.children,\n          renderPanelContent = _this$props2.renderPanelContent,\n          renderAll = _this$props2.renderAll,\n          overrides = _this$props2.overrides; // eslint-disable-next-line flowtype/no-weak-types\n\n      var newChildren = React.Children.map(children, function (child, index) {\n        if (!child) return; // If there is no key provide, use the panel order as default key\n\n        var key = child.key || String(index);\n        var isExpanded = false;\n\n        if (accordion) {\n          isExpanded = expanded[0] === key;\n        } else {\n          isExpanded = expanded.indexOf(key) > -1;\n        }\n\n        var props = {\n          key: key,\n          expanded: isExpanded || child.props.expanded,\n          accordion: accordion,\n          renderPanelContent: renderPanelContent,\n          renderAll: renderAll,\n          overrides: child.props.overrides || overrides,\n          disabled: child.props.disabled || disabled,\n          onChange: function onChange() {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n\n            return _this2.onPanelChange.apply(_this2, [key, child.props.onChange].concat(args));\n          }\n        };\n        return React.cloneElement(child, props);\n      });\n      return newChildren;\n    }\n  }, {\n    key: \"getSharedProps\",\n    value: function getSharedProps() {\n      var disabled = this.props.disabled;\n      return {\n        $disabled: disabled,\n        $isFocusVisible: false\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // TODO(v10)\n      if (process.env.NODE_ENV !== \"production\" && this.props.renderPanelContent) {\n        console.warn('baseui:Accordion The `renderPanelContent` prop is depreacated. Please update your code to use `renderAll`.');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var sharedProps = this.getSharedProps();\n      var _this$props$overrides = this.props.overrides,\n          overrides = _this$props$overrides === void 0 ? {} : _this$props$overrides;\n      var RootOverride = overrides.Root;\n\n      var _getOverrides = getOverrides(RootOverride, StyledRoot),\n          _getOverrides2 = _slicedToArray(_getOverrides, 2),\n          Root = _getOverrides2[0],\n          rootProps = _getOverrides2[1];\n\n      return React.createElement(Root, _extends({\n        \"data-baseweb\": \"accordion\"\n      }, sharedProps, rootProps), this.getItems());\n    }\n  }]);\n\n  return Accordion;\n}(React.Component);\n\n_defineProperty(Accordion, \"defaultProps\", {\n  accordion: true,\n  disabled: false,\n  initialState: {\n    expanded: []\n  },\n  renderPanelContent: false,\n  renderAll: false,\n  onChange: function onChange() {},\n  overrides: {},\n  stateReducer: function stateReducer(type, newState) {\n    return newState;\n  }\n});\n\nexport { Accordion as default };","map":null,"metadata":{},"sourceType":"module"}