{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n\nimport deepMerge from '../utils/deep-merge.js';\nimport colorTokens from './light-theme/color-tokens.js';\nimport getSemanticColors from './light-theme/color-semantic-tokens.js';\nimport getColorComponentTokens from './light-theme/color-component-tokens.js';\nimport getDeprecatedSemanticColors from './light-theme/color-deprecated-semantic-tokens.js';\nimport lighting from './shared/lighting.js';\nimport borders from './shared/borders.js';\nimport getTypography from './shared/typography.js';\nimport animation from './shared/animation.js';\nimport breakpoints from './shared/breakpoints.js';\nimport grid from './shared/grid.js';\nimport mediaQuery from './shared/media-query.js';\nimport sizing from './shared/sizing.js';\nexport default function createTheme( // overrides for colorTokens + primatyFontFamily\nthemeBuildingPrimitives, overrides) {\n  // extract font-family from the themeBuildingPrimitives\n  var primaryFontFamily = themeBuildingPrimitives.primaryFontFamily,\n      colors = _objectWithoutProperties(themeBuildingPrimitives, [\"primaryFontFamily\"]); // color keys in the themeBuildingPrimitives are the same as\n  // the colorTokens so we just extend it with overrides\n  // passed as an argument\n\n\n  var colorTokensWithOverrides = _objectSpread({}, colorTokens, {}, colors);\n\n  var theme = {\n    colors: _objectSpread({}, colorTokensWithOverrides, {}, getColorComponentTokens(colorTokensWithOverrides), {}, getDeprecatedSemanticColors(colorTokensWithOverrides), {}, getSemanticColors(colorTokensWithOverrides)),\n    animation: animation,\n    breakpoints: breakpoints,\n    borders: borders,\n    direction: 'auto',\n    grid: grid,\n    lighting: lighting,\n    mediaQuery: mediaQuery,\n    sizing: sizing,\n    typography: primaryFontFamily ? // have to check if primaryFontFamily override is passed in\n    // and use it to build the typography theme value\n    // otherwise the default primaryFontFamily value is used\n    getTypography({\n      primaryFontFamily: primaryFontFamily\n    }) : getTypography(),\n    // TODO(#2318) Remove in v10, the next major version.\n    // Do not use.\n    zIndex: {\n      modal: 2000\n    }\n  };\n  return deepMerge(theme, overrides);\n}","map":null,"metadata":{},"sourceType":"module"}