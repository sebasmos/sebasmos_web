{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["// @flow\n\nimport type {\n  Properties,\n  FontFace as FontFaceObject,\n  KeyframesObject,\n} from \"./style-types\";\n\nexport type {FontFaceObject, KeyframesObject};\n\n// Note: $Shape is needed to make polymorphic withStyle refinements work correctly\n// It seems functions satisfy this type without $Shape\n// See: https://github.com/facebook/flow/issues/6784\n//\n//\n//\n//\n//\n//\nexport type StyleObject = $Shape<{\n  ...Properties,\n  [string]: StyleObject, // Unrecognized properties are assumed to be media queries or pseudo selectors w/ nested style object. See: https://github.com/styletron/styletron-standard\n}>;\n\nexport interface StandardEngine {\n  renderStyle(style: StyleObject): string;\n  renderKeyframes(keyframes: KeyframesObject): string;\n  renderFontFace(fontFace: FontFaceObject): string;\n}\n\nexport function driver(style: StyleObject, styletron: StandardEngine): string {\n  const tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\n\nexport function getInitialStyle(): StyleObject {\n  return {};\n}\n\nexport function renderDeclarativeRules(\n  style: StyleObject,\n  styletron: StandardEngine,\n) {\n  for (const key in style) {\n    const val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes((val: any));\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        let result = \"\";\n        for (const font of val) {\n          if (typeof font === \"object\") {\n            result += `${styletron.renderFontFace((font: any))},`;\n          } else if (typeof font === \"string\") {\n            result += `${font},`;\n          }\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace((val: any));\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val, styletron);\n    }\n  }\n  return style;\n}\n"],"names":["driver","style","styletron","tx","renderDeclarativeRules","renderStyle","getInitialStyle","key","val","animationName","renderKeyframes","Array","isArray","result","font","renderFontFace","fontFamily","slice"],"mappings":";;;;AAUA;;;;;;;;;AAoBA,AAAO,SAASA,MAAT,CAAgBC,KAAhB,EAAoCC,SAApC,EAAuE;QACtEC,KAAKC,uBAAuBH,KAAvB,EAA8BC,SAA9B,CAAX;SACOA,UAAUG,WAAV,CAAsBF,EAAtB,CAAP;;AAGF,AAAO,SAASG,eAAT,GAAwC;SACtC,EAAP;;AAGF,AAAO,SAASF,sBAAT,CACLH,KADK,EAELC,SAFK,EAGL;OACK,MAAMK,GAAX,IAAkBN,KAAlB,EAAyB;UACjBO,MAAMP,MAAMM,GAAN,CAAZ;;QACIA,QAAQ,eAAR,IAA2B,OAAOC,GAAP,KAAe,QAA9C,EAAwD;YAChDC,aAAN,GAAsBP,UAAUQ,eAAV,CAA2BF,GAA3B,CAAtB;;;;QAGED,QAAQ,YAAR,IAAwB,OAAOC,GAAP,KAAe,QAA3C,EAAqD;UAC/CG,MAAMC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;YAClBK,SAAS,EAAb;;aACK,MAAMC,IAAX,IAAmBN,GAAnB,EAAwB;cAClB,OAAOM,IAAP,KAAgB,QAApB,EAA8B;sBACjB,GAAEZ,UAAUa,cAAV,CAA0BD,IAA1B,CAAsC,GAAnD;WADF,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;sBACxB,GAAEA,IAAK,GAAlB;;;;cAGEE,UAAN,GAAmBH,OAAOI,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAnB;;OATF,MAWO;cACCD,UAAN,GAAmBd,UAAUa,cAAV,CAA0BP,GAA1B,CAAnB;;;;;QAIA,OAAOA,GAAP,KAAe,QAAf,IAA2BA,QAAQ,IAAvC,EAA6C;6BACpBA,GAAvB,EAA4BN,SAA5B;;;;SAGGD,KAAP;;;;;;;"}