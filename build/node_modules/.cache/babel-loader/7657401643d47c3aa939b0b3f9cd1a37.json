{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n\nimport * as React from 'react';\nimport { LocaleContext } from '../locale/index.js';\nimport { getOverrides, mergeOverrides } from '../helpers/overrides.js';\nimport PlusIcon from '../icon/plus.js';\nimport CheckIndeterminateIcon from '../icon/check-indeterminate.js';\nimport { PanelContainer as StyledPanelContainer, Header as StyledHeader, Content as StyledContent, ToggleIcon as StyledToggleIcon } from './styled-components.js';\nimport { isFocusVisible, forkFocus, forkBlur } from '../utils/focusVisible.js';\n\nvar Panel = /*#__PURE__*/function (_React$Component) {\n  _inherits(Panel, _React$Component);\n\n  function Panel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Panel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Panel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isFocusVisible: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (event) {\n      if (isFocusVisible(event)) {\n        _this.setState({\n          isFocusVisible: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (event) {\n      if (_this.state.isFocusVisible !== false) {\n        _this.setState({\n          isFocusVisible: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          expanded = _this$props.expanded,\n          onChange = _this$props.onChange,\n          onClick = _this$props.onClick;\n\n      if (disabled) {\n        return;\n      }\n\n      typeof onChange === 'function' && onChange({\n        expanded: !expanded\n      });\n      typeof onClick === 'function' && onClick(e);\n      return;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (e) {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          expanded = _this$props2.expanded,\n          onChange = _this$props2.onChange,\n          onKeyDown = _this$props2.onKeyDown;\n\n      if (disabled) {\n        return;\n      } // toggle on Enter or Space button pressed\n\n\n      if (e.key === 'Enter' || e.which === 32) {\n        typeof onChange === 'function' && onChange({\n          expanded: !expanded\n        });\n        e.which === 32 && e.preventDefault(); // prevent jumping scroll when using Space\n      }\n\n      typeof onKeyDown === 'function' && onKeyDown(e);\n      return;\n    });\n\n    return _this;\n  }\n\n  _createClass(Panel, [{\n    key: \"getSharedProps\",\n    value: function getSharedProps() {\n      var _this$props3 = this.props,\n          disabled = _this$props3.disabled,\n          expanded = _this$props3.expanded;\n      return {\n        $disabled: disabled,\n        $expanded: expanded,\n        $isFocusVisible: this.state.isFocusVisible\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          expanded = _this$props4.expanded,\n          disabled = _this$props4.disabled,\n          _this$props4$override = _this$props4.overrides,\n          overrides = _this$props4$override === void 0 ? {} : _this$props4$override,\n          children = _this$props4.children,\n          ariaControls = _this$props4['aria-controls'],\n          title = _this$props4.title,\n          renderPanelContent = _this$props4.renderPanelContent,\n          renderAll = _this$props4.renderAll;\n      var sharedProps = this.getSharedProps();\n      var PanelContainerOverride = overrides.PanelContainer,\n          HeaderOverride = overrides.Header,\n          ContentOverride = overrides.Content,\n          ToggleIconOverride = overrides.ToggleIcon;\n      var isIconOverriden = ToggleIconOverride && (typeof ToggleIconOverride === 'function' || typeof ToggleIconOverride.component === 'function');\n\n      var _getOverrides = getOverrides(PanelContainerOverride, StyledPanelContainer),\n          _getOverrides2 = _slicedToArray(_getOverrides, 2),\n          PanelContainer = _getOverrides2[0],\n          panelContainerProps = _getOverrides2[1];\n\n      var _getOverrides3 = getOverrides(HeaderOverride, StyledHeader),\n          _getOverrides4 = _slicedToArray(_getOverrides3, 2),\n          Header = _getOverrides4[0],\n          headerProps = _getOverrides4[1];\n\n      var _getOverrides5 = getOverrides(ContentOverride, StyledContent),\n          _getOverrides6 = _slicedToArray(_getOverrides5, 2),\n          Content = _getOverrides6[0],\n          contentProps = _getOverrides6[1];\n\n      var _getOverrides7 = getOverrides(ToggleIconOverride, StyledToggleIcon),\n          _getOverrides8 = _slicedToArray(_getOverrides7, 2),\n          ToggleIcon = _getOverrides8[0],\n          toggleIconProps = _getOverrides8[1];\n\n      var toggleIconOverrides = mergeOverrides({\n        Svg: ToggleIcon\n      }, // $FlowFixMe\n      {\n        Svg: ToggleIconOverride\n      }); // it's a bit tricky ¯\\_(ツ)_/¯\n      // we only want to use the theme overrides, if it was not override locally\n\n      var ToggleIconComponent = isIconOverriden ? ToggleIcon : expanded ? CheckIndeterminateIcon : PlusIcon;\n      return React.createElement(LocaleContext.Consumer, null, function (locale) {\n        return React.createElement(PanelContainer, _extends({}, sharedProps, panelContainerProps), React.createElement(Header, _extends({\n          tabIndex: 0,\n          role: \"button\",\n          \"aria-expanded\": expanded,\n          \"aria-disabled\": disabled || null\n        }, sharedProps, headerProps, ariaControls ? {\n          'aria-controls': ariaControls\n        } : {}, {\n          onClick: _this2.onClick,\n          onKeyDown: _this2.onKeyDown,\n          onFocus: forkFocus(headerProps, _this2.handleFocus),\n          onBlur: forkBlur(headerProps, _this2.handleBlur)\n        }), title, React.createElement(ToggleIconComponent, _extends({\n          size: 16,\n          title: expanded ? locale.accordion.collapse : locale.accordion.expand\n        }, sharedProps, toggleIconProps, {\n          overrides: toggleIconOverrides\n        }))), React.createElement(Content, _extends({}, sharedProps, contentProps, ariaControls ? {\n          id: ariaControls\n        } : {}), expanded || renderPanelContent || renderAll ? children : null));\n      });\n    }\n  }]);\n\n  return Panel;\n}(React.Component);\n\n_defineProperty(Panel, \"defaultProps\", {\n  disabled: false,\n  expanded: false,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  onKeyDown: function onKeyDown() {},\n  title: ''\n});\n\nexport default Panel;","map":null,"metadata":{},"sourceType":"module"}