{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n\nimport * as React from 'react';\nimport Popper from 'popper.js';\nimport { toPopperPlacement, parsePopperOffset } from './utils.js';\nimport { TETHER_PLACEMENT } from './constants.js';\n\nvar Tether = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tether, _React$Component);\n\n  function Tether() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tether);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tether)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"popper\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"popperHeight\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isMounted: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPopperUpdate\", function (data) {\n      var normalizedOffsets = {\n        popper: parsePopperOffset(data.offsets.popper),\n        arrow: data.offsets.arrow ? parsePopperOffset(data.offsets.arrow) : {\n          top: 0,\n          left: 0\n        }\n      };\n\n      _this.props.onPopperUpdate(normalizedOffsets, data);\n    });\n\n    return _this;\n  }\n\n  _createClass(Tether, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isMounted: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      // Handles the case where popover content changes size and creates a gap between the anchor and\n      // the popover. Popper.js only schedules updates on resize and scroll events. In the case of\n      // the Select component, when options were filtered in the dropdown menu it creates a gap\n      // between it and the input element.\n      if (this.props.popperRef) {\n        var _this$props$popperRef = this.props.popperRef.getBoundingClientRect(),\n            height = _this$props$popperRef.height;\n\n        if (this.popperHeight !== height) {\n          this.popperHeight = height;\n          this.popper && this.popper.scheduleUpdate();\n        }\n\n        if (this.state.isMounted !== prevState.isMounted) {\n          if (!this.props.anchorRef) {\n            if (process.env.NODE_ENV !== \"production\") {\n              // eslint-disable-next-line no-console\n              console.warn(\"[baseui][TetherBehavior] ref has not been passed to the Popper's anchor element.\\n              See how to pass the ref to an anchor element in the Popover example\\n              http://baseui.design/components/popover#anchor-ref-handling-example\");\n            }\n          } else {\n            this.initializePopper();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroyPopover();\n    }\n  }, {\n    key: \"initializePopper\",\n    value: function initializePopper() {\n      var _this$props = this.props,\n          placement = _this$props.placement,\n          popperOptions = _this$props.popperOptions;\n\n      var modifiers = popperOptions.modifiers,\n          restOptions = _objectWithoutProperties(popperOptions, [\"modifiers\"]);\n\n      if (!this.props.anchorRef || !this.props.popperRef) return;\n      this.popper = new Popper(this.props.anchorRef, this.props.popperRef, _objectSpread({\n        // Recommended placement (popper may ignore if it causes a viewport overflow, etc)\n        placement: toPopperPlacement(placement),\n        modifiers: _objectSpread({\n          // Passing the arrow ref will measure the arrow when calculating styles\n          arrow: {\n            element: this.props.arrowRef,\n            enabled: !!this.props.arrowRef\n          },\n          computeStyle: {\n            // Make popper use top/left instead of transform translate, this is because\n            // we use transform for animations and we dont want them to conflict\n            gpuAcceleration: false\n          },\n          applyStyle: {\n            // Disable default styling modifier, we'll apply styles on our own\n            enabled: false\n          },\n          applyReactStyle: {\n            enabled: true,\n            fn: this.onPopperUpdate,\n            order: 900\n          },\n          preventOverflow: {\n            enabled: true\n          }\n        }, modifiers)\n      }, restOptions));\n    }\n  }, {\n    key: \"destroyPopover\",\n    value: function destroyPopover() {\n      if (this.popper) {\n        this.popper.destroy();\n        delete this.popper;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children || null;\n    }\n  }]);\n\n  return Tether;\n}(React.Component);\n\n_defineProperty(Tether, \"defaultProps\", {\n  anchorRef: null,\n  onPopperUpdate: function onPopperUpdate() {\n    return null;\n  },\n  placement: TETHER_PLACEMENT.auto,\n  popperRef: null,\n  popperOptions: {}\n});\n\nexport default Tether;","map":null,"metadata":{},"sourceType":"module"}